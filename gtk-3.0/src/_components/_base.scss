* {
    padding: 0;
    -GtkToolButton-icon-spacing: 4;
    -GtkTextView-error-underline-color: $error_color;

    // The size for scrollbars. The slider is 2px smaller, but we keep it
    // up so that the whole area is sensitive to button presses for the
    // slider. The stepper button is larger in both directions, the slider
    // only in the width

    -GtkScrolledWindow-scrollbar-spacing: 0;
    -GtkToolItemGroup-expander-size: 11;
    -GtkWidget-text-handle-width: 20;
    -GtkWidget-text-handle-height: 24;
    -GtkDialog-button-spacing: 4;
    -GtkDialog-action-area-border: 0;

    // We use the outline properties to signal the focus properties
    // to the adwaita engine: using real CSS properties is faster,
    // and we don't use any outlines for now.

    outline-color: transparentize($fg_color, 0.7);
    outline-style: dashed;
    outline-offset: -3px;
    outline-width: 1px;
    -gtk-outline-radius: 2px;
    -gtk-secondary-caret-color: $selected_bg_color;
}

/***************
 * Base States *
 ***************/
.background {
    color: $fg_color;
    background-color: $bg_color;

    &:backdrop {
        color: $backdrop_fg_color;
        background-color: $backdrop_bg_color;
        text-shadow: none;
        -gtk-icon-shadow: none;
    }
}

/*
   These wildcard seems unavoidable, need to investigate.
   Wildcards are bad and troublesome, use them with care,
   or better, just don't.
   Everytime a wildcard is used a kitten dies, painfully.
*/

*:disabled {
    -gtk-icon-filter: opacity(0.5);
}

.gtkstyle-fallback {
    color: $fg_color;
    background-color: $bg_color;

    &:hover {
        color: $fg_color;
        background-color: lighten($bg_color, 10%);
    }

    &:active {
        color: $fg_color;
        background-color: darken($bg_color, 10%);
    }

    &:disabled {
        color: $insensitive_fg_color;
        background-color: $insensitive_bg_color;
    }

    &:selected {
        color: $selected_fg_color;
        background-color: $selected_bg_color;
    }
}

.view,
%view {
    color: $text_color;
    background-color: $base_color;

    &:backdrop {
        color: $backdrop_text_color;
        background-color: $backdrop_base_color;

        &:disabled {
            color: $backdrop_insensitive_color;
        }
    }

    &:disabled {
        color: $insensitive_fg_color;
        background-color: $insensitive_bg_color;
    }

    &:selected {
        &:focus, & {
            @extend %selected_items;

            border-radius: 3px;
        }
    }
}

.view {
    outline: none;
}

textview {
    outline: none;

    > text {
        @extend %view;

        selection {
            &:focus, & {
                @extend %selected_items;
            }
        }
    }
}

textview border {
    background-color: mix($bg_color, $base_color, 50%);
}

iconview {
    @extend .view;
}

.rubberband,
rubberband {
    border: 1px solid darken($selected_bg_color, 10%);
    background-color: transparentize(darken($selected_bg_color, 10%), 0.8);
}

flowbox {
    rubberband {
        @extend rubberband;
    }

    flowboxchild {
        padding: 3px;

        &:selected {
            @extend %selected_items;

            outline-offset: -2px;
        }
    }
}

.content-view .tile {
    margin: 2px;
    background-color: if($variant == "light", transparent, black);
    border-radius: 0;
    padding: 0;

    &:backdrop {
        background-color: if($variant == "light", transparent, darken($backdrop_base_color, 5%));
    }

    &:active, &:selected {
        background-color: if($variant == "light", transparent, $selected_bg_color);
    }

    &:disabled {
        background-color: if($variant == "light", transparent, $insensitive_bg_color);
    }
}

label {
    caret-color: currentColor;

    // this shouldn't be needed.

    &.separator {
        @extend .dim-label;

        color: $fg_color;

        &:backdrop {
            color: $backdrop_fg_color;
        }
    }

    row:selected &,
    &:selected {
        @extend %nobg_selected_items;
    }

    selection {
        background-color: $selected_bg_color;
        color: $selected_fg_color;
    }

    &:disabled {
        color: $insensitive_fg_color;

        selection {
            @extend %selected_items:disabled;
        }

        &:backdrop {
            color: $backdrop_insensitive_color;
        }
    }

    &:backdrop {
        color: $backdrop_fg_color;

        selection {
            @extend %selected_items:backdrop;
        }
    }
}

.dim-label {
    opacity: 0.55;
    text-shadow: none;
}

assistant {
    .sidebar {
        background-color: $base_color;
        border-top: 1px solid $borders_color;

        &:backdrop {
            background-color: $backdrop_base_color;
            border-color: $backdrop_borders_color;
        }
    }

    &.csd .sidebar {
        border-top-style: none;
    }

    .sidebar label {
        padding: 6px 12px;
    }

    .sidebar label.highlight {
        background-color: mix($bg_color, $fg_color, 80%);
    }
}

%osd,
.osd {
    color: $osd_fg_color;
    border: none;
    background-color: $osd_bg_color;
    background-clip: padding-box;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;

    &:backdrop {
        text-shadow: none;
        -gtk-icon-shadow: none;
    }
}

// catch all extend :)

%selected_items {
    background-color: $selected_bg_color;

    @at-root %nobg_selected_items, & {
        color: $selected_fg_color;

        &:disabled {
            color: mix($selected_fg_color, $selected_bg_color, 50%);
        }

        &:backdrop {
            color: $backdrop_selected_fg_color;

            &:disabled {
                color: mix($backdrop_selected_fg_color, $selected_bg_color, 30%);
            }
        }
    }
}
