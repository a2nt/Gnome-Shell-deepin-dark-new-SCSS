/*****************
* Drawing mixins *
*****************/

// drawing of depth/shadows

$depth: 0 1px 2px rgba(0, 0, 0, 0.1), 0 2px 3px rgba(0, 0, 0, 0.22);

$depth2: 0 1px 2px rgba(0, 0, 0, 0.15), 0 2px 3px rgba(0, 0, 0, 0.3);

$depth3: inset 0 1px 1px rgba(0, 0, 0, 0.06), inset 0 1px 2px rgba(0, 0, 0, 0.2),
    0px 1px 0px 0px rgba(255, 255, 255, 0.15);

$depth4: inset 0 1px 2px rgba(0, 0, 0, 0.1), inset 0 2px 3px rgba(0, 0, 0, 0.22);

$depth5: inset 0 1px 2px rgba(0, 0, 0, 0.15), inset 0 2px 3px rgba(0, 0, 0, 0.3);

$depth6: 0 2px 4px 2px transparentize(black, 0.8);

// generic drawing of more complex things

@function _widget_edge($c: $borders_edge) {
    // outer highlight "used" on most widgets
    @return 0 1px $c;
}

@mixin lines($t, $c: $selected_bg_color) {
    @if $t == up {
        box-shadow: inset 0 -3px 0 0 darken($c, 5%);
    }

    @if $t == down {
        box-shadow: inset 0 3px 0 0 darken($c, 5%);
    }

    @if $t == both {
        box-shadow: inset 0 -3px 0 0 darken($c, 5%),
            inset 0 3px 0 0 darken($c, 5%);
    }
}

@mixin _shadows($shadow1, $shadow2: none, $shadow3: none, $shadow4: none) {
    //
    // Helper function to stack up to 4 box-shadows;
    //
    @if $shadow4 != none {
        box-shadow: $shadow1, $shadow2, $shadow3, $shadow4;
    } @else if $shadow3 != none {
        box-shadow: $shadow1, $shadow2, $shadow3;
    } @else if $shadow2 != none {
        box-shadow: $shadow1, $shadow2;
    } @else {
        box-shadow: $shadow1;
    }
}

// provide font size in rem, with px fallback
@mixin fontsize($size: 24, $base: 16) {
    @if $hidpi {
        font-size: round($size * 2) + pt;
    } @else {
        font-size: round($size * 2) + pt;
    }

    //font-size: ($size / $base) * 1rem;
}

// entries

@mixin entry($t, $fc: $selected_bg_color, $edge: $borders_edge) {
    //
    // Entries drawing function
    //
    // $t: entry type
    // $fc: focus color
    // $edge: set to none to not draw the bottom edge or specify a color to not
    //        use the default one
    //
    // possible $t values:
    // normal, focus, insensitive
    //

    @if $t == normal {
        background-color: $gray;
        border-color: $borders_color;

        @include _shadows($depth);
    }

    @if $t == focus {
        @include _shadows($depth);
    }

    @if $t == hover {
    }

    @if $t == insensitive {
        color: $insensitive_fg_color;
        box-shadow: $depth;
    }
}

@function entry_focus_border($fc: $selected_bg_color) {
    @if $variant == 'light' {
        @return $fc;
    } @else {
        @return if(
            $fc == $selected_bg_color,
            $selected_borders_color,
            darken($fc, 35%)
        );
    }
}

@function entry_gradient($c) {
    @if $variant == 'light' {
        @return linear-gradient(
            to bottom,
            mix($borders_color, $c, 45%),
            mix($borders_color, $c, 3%) 2px,
            $c 90%
        );
    } @else {
        @return linear-gradient(
            to bottom,
            mix($borders_color, $c, 95%),
            mix($borders_color, $c, 40%) 3px,
            $c 90%
        );
    }
}

// buttons

@function _border_color($c) {
    @return darken($c, 25%);
}

// colored buttons want
// the border form the
// base color

@function _text_shadow_color($tc: $fg_color, $bg: $bg_color) {
    //
    // calculate the color of text shadows
    //
    // $tc is the text color
    // $bg is the background color
    //
    $_lbg: lightness($bg) / 100%;

    @if lightness($tc) < 50% {
        @return transparentize(white, 1 - $_lbg / ($_lbg * 1.3));
    } @else {
        @return transparentize(black, $_lbg * 0.8);
    }
}

@function _button_hilight_color($c) {
    //
    // calculate the right top hilight color for buttons
    //
    // $c: base color;
    //
    @if lightness($c) > 90% {
        @return white;
    } @else if lightness($c) > 80% {
        @return transparentize(white, 0.3);
    } @else if lightness($c) > 50% {
        @return transparentize(white, 0.5);
    } @else if lightness($c) > 40% {
        @return transparentize(white, 0.7);
    } @else {
        @return transparentize(white, 0.9);
    }
}

@mixin _button_text_shadow($tc: $fg_color, $bg: $bg_color) {
    //
    // helper function for the text emboss effect
    //
    // $tc is the optional text color, not the shadow color
    //
    // TODO: this functions needs a way to deal with special cases
    //

    $_shadow: _text_shadow_color($tc, $bg);

    @if lightness($tc) < 50% {
        text-shadow: 0 1px $_shadow;
        -gtk-icon-shadow: 0 1px $_shadow;
    } @else {
        text-shadow: 0 -1px $_shadow;
        -gtk-icon-shadow: 0 -1px $_shadow;
    }
}

@mixin button($t, $c: $osd_bg_color, $tc: $fg_color, $edge: $borders_edge) {
    //
    // Button drawing function
    //
    // $t:    button type,
    // $c:    base button color for colored* types
    // $tc:   optional text color for colored* types
    // $edge: set to none to not draw the bottom edge or specify a color to not
    //        use the default one
    //
    // possible $t values:
    // normal, hover, active, insensitive, insensitive-active,
    // backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
    // osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
    //

    $_hilight_color: _button_hilight_color($c);
    $_button_edge: if($edge == none, none, _widget_edge($edge));
    $_blank_edge: if(
        $edge == none,
        none,
        _widget_edge(transparentize($edge, 1))
    );

    @if $t == normal {
        //
        // normal button
        //

        color: $fg_color;
        background-color: $main_dark;
        box-shadow: none;
        border: 1px solid $borders_color;
        text-shadow: 0 1px black;
        -gtk-icon-shadow: 0 1px black;
        border: 1px solid $borders_color;
    }

    @if $t == focus {
        //
        // focused button
        //
        $_bg: if($c != $osd_bg_color, transparentize($c, 0.5), $osd_bg_color);

        color: $selected_bg_color;
        text-shadow: 0 1px black;
        -gtk-icon-shadow: 0 1px black;
        box-shadow: none;
        border: 1px solid $borders_color;
    } @else if $t == hover {
        //
        // active osd button
        //
        $_bg: if(
            $c != $osd_bg_color,
            transparentize($c, 0.3),
            lighten($main_dark, 2%)
        );

        color: $selected_bg_color;
        background-color: $_bg;
        border: 1px solid $borders_color;
        text-shadow: 0 1px black;
        -gtk-icon-shadow: 0 1px black;
    } @else if $t == active {
        //
        // active osd button
        //
        $_bg: if($c != $bg_color, $c, $selected_bg_color);

        color: $selected_bg_color;
        background-color: $_bg;

        // This should be none, but it's creating some issues with borders, so to
        // workaround it for now, use inset wich goes through a different code path.
        // see https://bugzilla.gnome.org/show_bug.cgi?id=752934
        border: 1px solid $borders_color;
        text-shadow: none;
        -gtk-icon-shadow: none;
    } @else if $t == insensitive {
        //
        // insensitive osd button
        //
        $_bg: transparentize(
            mix($insensitive_fg_color, $osd_bg_color, 20%),
            0.3
        );

        color: $insensitive_fg_color;
        background-color: $_bg;
        box-shadow: $depth4;
        border: none;
        text-shadow: none;
        -gtk-icon-shadow: none;
    } @else if $t == undecorated {
        //
        // reset
        //
        border-color: transparent;
        background-color: transparent;
        background-image: none;

        @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);

        text-shadow: none;
        -gtk-icon-shadow: none;
    }
}

@mixin gradient($c1: $g1, $c2: $g2, $dir: horizontal) {
    background-gradient-start: $c1;
    background-gradient-end: $c2;
    background-gradient-direction: $dir;
}

@mixin trough($flat: false, $c: $bg_color, $tc: $fg_color, $noedge: true) {
    color: mix($tc, $bg_color, 80%);

    @if $flat {
        background-image: linear-gradient(to bottom, $c, $c);
    } @else {
        background-image: linear-gradient(
            to bottom,
            mix(black, $c, 15%) 5%,
            mix(black, $c, 10%) 20%,
            mix(black, $c, 10%) 90%,
            $c
        );
    }

    border-color: if($c != $bg_color, _border_color($c), $border_color);

    @if not $noedge {
        @if lightness($c) > 60% {
            box-shadow: inset 0 -1px $borders_edge, 0 1px $borders_edge;
        } @else {
            box-shadow: inset 0 -1px transparentize($borders_edge, 0.5),
                0 1px transparentize($borders_edge, 0.5);
        }
    } @else {
        box-shadow: none;
    }
}

@mixin headerbar_fill($c: $headerbar_color, $hc: $top_highlight, $ov: none) {
    //
    // headerbar fill
    //
    // $c:  base color
    // $hc: top highlight color
    // $ov: a background layer for background shorthand (hence no commas!)
    //
    $gradient: linear-gradient(
        to top,
        darken($c, 13%),
        darken($c, 2%) 2px,
        $c 3px
    );

    @if $variant == 'dark' {
        $gradient: linear-gradient(
            to top,
            darken($c, 3%),
            darken($c, 1%) 2px,
            $c 3px
        );
    }

    @if $ov != none {
        background: $c $ov, $gradient;
    } @else {
        background: $c $gradient;
    }

    box-shadow: inset 0 1px $hc;

    // top highlight
}

@mixin overshoot($p, $t: normal, $c: $fg_color) {
    //
    // overshoot
    //
    // $p: position
    // $t: type
    // $c: base color
    //
    // possible $p values:
    // top, bottom, right, left
    //
    // possible $t values:
    // normal, backdrop
    //

    $_small_gradient_length: 5%;
    $_big_gradient_length: 100%;

    $_position: center top;
    $_small_gradient_size: 100% $_small_gradient_length;
    $_big_gradient_size: 100% $_big_gradient_length;

    @if $p == bottom {
        $_position: center bottom;
        $_linear_gradient_direction: to top;
    } @else if $p == right {
        $_position: right center;
        $_small_gradient_size: $_small_gradient_length 100%;
        $_big_gradient_size: $_big_gradient_length 100%;
    } @else if $p == left {
        $_position: left center;
        $_small_gradient_size: $_small_gradient_length 100%;
        $_big_gradient_size: $_big_gradient_length 100%;
    }

    $_small_gradient_color: $c;
    $_big_gradient_color: $c;

    @if $c == $fg_color {
        $_small_gradient_color: darken($borders_color, 10%);
        $_big_gradient_color: $fg_color;

        @if $t == backdrop {
            $_small_gradient_color: $backdrop_borders_color;
        }
    }

    $_small_gradient: -gtk-gradient(
        radial,
        $_position,
        0,
        $_position,
        0.5,
        to($_small_gradient_color),
        to(transparentize($_small_gradient_color, 1))
    );

    $_big_gradient: -gtk-gradient(
        radial,
        $_position,
        0,
        $_position,
        0.6,
        from(transparentize($_big_gradient_color, 0.93)),
        to(transparentize($_big_gradient_color, 1))
    );

    @if $t == normal {
        background-image: $_small_gradient, $_big_gradient;
        background-size: $_small_gradient_size, $_big_gradient_size;
    } @else if $t == backdrop {
        background-image: $_small_gradient;
        background-size: $_small_gradient_size;
    }

    background-repeat: no-repeat;
    background-position: $_position;
    background-color: transparent;

    // reset some properties to be sure to not inherit them somehow
    border: none;

    //
    box-shadow: none;

    //
}

@mixin undershoot($p) {
    //
    // undershoot
    //
    // $p: position
    //
    // possible $p values:
    // top, bottom, right, left
    //

    $_undershoot_color_dark: transparentize(black, 0.8);
    $_undershoot_color_light: transparentize(white, 0.8);

    $_gradient_dir: left;
    $_dash_bg_size: 10px 1px;
    $_gradient_repeat: repeat-x;
    $_bg_pos: center $p;

    background-color: transparent;

    // shouldn't be needed, but better to be sure;

    @if $p == left or $p == right {
        $_gradient_dir: top;
        $_dash_bg_size: 1px 10px;
        $_gradient_repeat: repeat-y;
        $_bg_pos: $p center;
    }

    background-image: linear-gradient(
        to $_gradient_dir,
        $_undershoot_color_light 50%,
        $_undershoot_color_dark 50%
    );
    padding-#{$p}: 1px;
    background-size: $_dash_bg_size;
    background-repeat: $_gradient_repeat;
    background-origin: content-box;
    background-position: $_bg_pos;
    border: none;
    box-shadow: none;
}

@mixin scale-highlight($dir) {
    background: linear-gradient(to $dir, #00f17d, #00f7d2);
}
